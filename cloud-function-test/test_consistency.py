#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Probar consistencia ejecutando la misma transcripci√≥n m√∫ltiples veces
"""
import sys
import codecs
if sys.platform == "win32":
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())

import os
import json
from collections import Counter

def test_consistency():
    """Probar consistencia ejecutando 5 veces el mismo an√°lisis"""
    
    # Importar funci√≥n de an√°lisis
    from main import analyze_quality_with_openai
    
    # Obtener API key
    from main import get_secret_value
    openai_key = get_secret_value('openai-api-key')
    if not openai_key:
        print("ERROR: No se pudo obtener OpenAI API key")
        return
    
    os.environ['OPENAI_API_KEY'] = openai_key
    
    # Transcripci√≥n de prueba
    transcripcion = """Al√≥. Buenas tardes. ¬øQu√© tal? ¬øCon el se√±or Alejandro Chenco Correa Hilo? S√≠. ¬øC√≥mo c√≥mo est√° usted? Est√° hablando con Juan Parisaca, que es de la oficina de Maquicistems Arequipa. Se√±or Alejandro, usted ya es cliente de nosotros. ¬øCorrecto? Usted ya ven√≠a trabajando con nosotros con financiamiento por 400000 d√≥lares, y el mes pasado vimos 100000 d√≥lares adicional. Este mes ya han aprobado los 300 restante, con lo cual completar√≠amos la inversi√≥n de de 800000 d√≥lares. ¬øS√≠? Exacto, s√≠. S√≠, s√≠. Perfecto. M√°s que todo es para validar que usted s√≠ comprende c√≥mo c√≥mo es nuestro sistema de trabajo. ¬øNo? Usted ya viene pagando sus cuotas mensuales. Me coment√≥ su asesor, la se√±ora Carol, la se√±orita Carolina, que usted ya tiene pensado empezar a hacer sus remates. ¬øCorrecto? Para adjudicar su certificado. S√≠, correcto. S√≠, correcto. Una vez que usted adjudique todos sus certificados, ya sea por sorteo o por remate, iniciar√≠amos el proceso de adjudicaci√≥n del bien. Usted puede utilizar sus certificados por separado o en conjunto, como usted lo vea por conveniente. ¬øS√≠, se√±or Alejandro? S√≠, s√≠, perfecto, s√≠. Perfecto, se√±or Alejandro. En todo caso, era m√°s que todo para informarle eso, lo inscribimos ahora al sistema, desde ma√±ana usted ya puede empezar a hacer su remate si lo por conveniente. Ok, s√≠, s√≠. Muy amable. Buenas noches, se√±or Alejandro, gracias. Buenas noches, gracias. Gracias. Hasta luego."""
    
    dni_test = "729143"
    fecha_test = "2025-05-22"
    
    validation_data_test = {
        "tipo_no_conf_val1": "No Contesta/Contesta tercero",
        "numero_documento": f"00{dni_test}",
        "vendedor": "Juan Parisaca",
        "supervisor": "Test Supervisor", 
        "gestor": "Test Gestor",
        "nombre": "CHEN CORREAZHILONG ALEJANDRO"
    }
    
    print("PRUEBA DE CONSISTENCIA - 5 EJECUCIONES")
    print("="*60)
    
    results = []
    
    for i in range(5):
        print(f"\n--- EJECUCI√ìN {i+1}/5 ---")
        
        try:
            result = analyze_quality_with_openai(
                transcripcion, 
                dni_test, 
                fecha_test, 
                validation_data_test
            )
            
            if result.get('success'):
                # Extraer puntuaciones
                puntos = [
                    1 if result.get('puntuacion_identidad', 0) >= 5 else 0,
                    1 if result.get('puntuacion_terminos', 0) >= 5 else 0,
                    1 if result.get('puntuacion_claridad_ganar', 0) >= 5 else 0,
                    1 if result.get('puntuacion_consulta_dudas', 0) >= 5 else 0,
                    1 if result.get('puntuacion_siguientes_pasos', 0) >= 5 else 0
                ]
                
                total_puntos = sum(puntos)
                categoria = result.get('categoria', 'N/A')
                conformidad = result.get('conformidad', 'N/A')
                
                results.append({
                    'ejecucion': i+1,
                    'identidad': puntos[0],
                    'terminos': puntos[1], 
                    'ganar': puntos[2],
                    'dudas': puntos[3],
                    'pasos': puntos[4],
                    'total_puntos': total_puntos,
                    'categoria': categoria,
                    'conformidad': conformidad
                })
                
                print(f"  Puntos: {puntos} = {total_puntos}/5")
                print(f"  Categor√≠a: {categoria}")
                print(f"  Conformidad: {conformidad}")
                
            else:
                print(f"  ‚ùå Error: {result.get('error')}")
                
        except Exception as e:
            print(f"  ‚ùå Excepci√≥n: {e}")
    
    print("\n" + "="*60)
    print("AN√ÅLISIS DE CONSISTENCIA:")
    print("="*60)
    
    if results:
        # Analizar variabilidad
        categories = [r['categoria'] for r in results]
        conformidades = [r['conformidad'] for r in results]
        total_puntos_list = [r['total_puntos'] for r in results]
        
        print(f"Categor√≠as: {Counter(categories)}")
        print(f"Conformidades: {Counter(conformidades)}")  
        print(f"Total puntos: {Counter(total_puntos_list)}")
        
        # Calcular variabilidad por criterio
        criterios = ['identidad', 'terminos', 'ganar', 'dudas', 'pasos']
        print("\nVariabilidad por criterio:")
        for criterio in criterios:
            valores = [r[criterio] for r in results]
            variabilidad = len(set(valores)) > 1
            print(f"  {criterio.capitalize()}: {Counter(valores)} {'‚ùå INCONSISTENTE' if variabilidad else '‚úÖ CONSISTENTE'}")
        
        # Consistencia general
        categoria_consistente = len(set(categories)) == 1
        conformidad_consistente = len(set(conformidades)) == 1
        
        print(f"\nüéØ CONSISTENCIA GENERAL:")
        print(f"   Categor√≠a: {'‚úÖ CONSISTENTE' if categoria_consistente else '‚ùå INCONSISTENTE'}")
        print(f"   Conformidad: {'‚úÖ CONSISTENTE' if conformidad_consistente else '‚ùå INCONSISTENTE'}")
        
        if categoria_consistente and conformidad_consistente:
            print("   üéâ SISTEMA CONSISTENTE")
        else:
            print("   ‚ö†Ô∏è NECESITA MEJORAR CONSISTENCIA")

if __name__ == "__main__":
    test_consistency()